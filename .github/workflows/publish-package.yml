name: Publish

on:
  workflow_call:
    secrets:
      GPG_PRIVATE_KEY:
        description: "GPG private key"
        required: true

jobs:
  publish:
    permissions:
      # Allow this job to write to the pages branch
      contents: write

    runs-on: ubuntu-latest

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/artifacts

      - name: Job Setup
        uses: jordansissel/actions-experiments/.github/actions/cache-apt@main
        with:
          packages: reprepro gnupg debsigs createrepo-c jq

      - name: Configure GPG
        id: gpg
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        run: |
          echo "::add-mask::$GPG_PRIVATE_KEY"
          # Import the gpg key and output the fingerprint that we'll need for key signing later.
          echo "$GPG_PRIVATE_KEY" | gpg --batch --import --import-options import-show --list-options show-only-fpr-mbox  > gpg.out

          KEY_ID="$(cut -f 1 -d ' ' < gpg.out)"
          echo "KEY_ID=$KEY_ID" >> $GITHUB_OUTPUT

          #echo "$KEY_ID:6:" | tr -d ' ' | gpg --batch --import-ownertrust --pinentry-mode=loopback

      - uses: actions/checkout@v4
        with:
          ref: pages

      # XXX: Signing should happen when the packages are created instead.
      #- name: Sign debs
        #env:
          #KEY_ID: ${{ steps.gpg.outputs.KEY_ID }}
        #run: |
          #find "${RUNNER_TEMP}/artifacts" -type f -name '*.deb' -print0 | \
            #xargs -0t debsigs -v --gpgopts="--batch --no-tty --pinentry-mode=loopback" --sign=origin --default-key="$KEY_ID" 

      - name: Update repositories
        run: |
          set -x
          echo "# Package Repository Updates" >> $GITHUB_STEP_SUMMARY
          for artifact in "${RUNNER_TEMP}/artifacts/"*/package.json ; do
            echo $artifact
            cat $artifact
            echo 
            files="$(jq -r '.files' < $artifact)"
            system_id="$(jq -r '.system_id' < $artifact)"
            system_version="$(jq -r '.system_version' < $artifact)"
            system_codename="$(jq -r '.system_codename' < $artifact)"

            source="$(dirname "$artifact")/${files}"

            echo "[ $name ] Processing package: ${files}"
            case "$system_id" in
              debian|ubuntu)
                repo="repository/"
                #if [ ! -f "$repo/conf/distributions" ] ; then
                if ! grep -q "Codename: $system_codename" "$repo/conf/distributions" ; then
                  [ ! -d "$repo/conf" ] && mkdir -p "$repo/conf"

                  # Append to the distributions file
                  (
                    echo "Codename: $system_codename"
                    echo "Architectures: amd64 arm64 i386"
                    echo "Components: main"
                    echo "SignWith: ${{ steps.gpg.outputs.KEY_ID }}"
                    echo "Origin: the fpm project"
                    echo "Label: fpm"
                    echo "Description: fpm"
                    echo
                  ) >> "$repo/conf/distributions" || exit 1
                fi

                ## Ensure the reprepro config knows about the codename for this package
                #if ! sed -ne 's/^Codename: *//p' "$repo/conf/distributions" | fmt -1 | grep -iF FOO ; then
                  #sed -ie "s/^Codename:.*/\0 ${system_codename}/" "$repo/conf/distributions"
                #fi

                # reprepro includedeb will copy the file into the repo for us
                if ! reprepro -Vb "$repo" includedeb "$system_codename" "$source" ; then
                  echo "::error ::reprepro failed on $repo"
                  exit 1
                fi
                ;;
              rocky|almalinux|fedora)
                repo="repository/${system_id}/${system_version}"

                [ ! -d "$repo/packages" ] && mkdir -p "$repo/packages"

                destination="$repo/packages/$files"
                if [ -f "$repo/packages/$files" ] ; then
                  echo "Problem: File already exists in repo. Refusing to proceed."
                  exit 1
                else
                  cp -v --preserve=timestamps "$source"  "$destination"
                fi
                
                if ! createrepo_c -v "$repo" ; then
                  echo "Problem: createrepo failed on repo: $repo"
                  echo "::error ::createrepo failed on $repo"
                  exit 1
                fi
                ;;
              *)
                echo "Problem: Unexpected distro name: $system_id"
                cat $artifact
                exit 1
                ;;
            esac

            echo "* $name - Added to repository: $files" >> $GITHUB_STEP_SUMMARY
          done

      - name: Commit and push
        run: |
          # Need to set git user and email
          # Citation> https://github.com/actions/checkout?tab=readme-ov-file#push-a-commit-using-the-built-in-token
          #git config user.name "github-actions[bot]"
          #git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          #git add repo
          #git commit repo -m "reprepro packages"
          #git push
name: ðŸ“¦ FPM - Multiple Platforms

on:
  workflow_dispatch:
    inputs:
      version: 
        default: "1.16.0"
        description: The version of FPM to package

env:
  registry: ghcr.io

jobs:
  package:
    name: ðŸ“¦ FPM v${{ matrix.version }} for ${{ matrix.image }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        version: 
          - ${{ inputs.version }}
        image: [ "rockylinux:9", "fedora:42", "ubuntu:24.04", "ubuntu:22.04", "debian:11", "debian:12" ]

    env:
      # docker/build-push-action is documented to output an 'imageid', but in
      # practice, it seems to only output 'metadata' and nothing else
      # So, in order to know what docker image we just built, we gotta name it with a tag.
      # Reference: https://github.com/docker/build-push-action/issues/1209
      TARGET_TAG: "lolcomputers"

      # Disable docker/build-push-action's summary output
      # Reference: https://github.com/docker/build-push-action?tab=readme-ov-file#environment-variables
      DOCKER_BUILD_SUMMARY: false

      # This job doesn't publish the docker image so there's no need for any kind of record uploading
      DOCKER_BUILD_RECORD_UPLOAD: false

    outputs:
      files: ${{ steps.package.outputs.files }}
      system_id: ${{ steps.package.outputs.system_id }}
      system_version: ${{ steps.package.outputs.system_version }}
      #artifact_id: ${{ steps.upload.outputs.artifact-id }}
      #artifact_url: ${{ steps.upload.outputs.artifact-url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        id: container
        uses: docker/build-push-action@v6
        with:
          context: fpm
          push: false
          tags: ${{ env.TARGET_TAG }}
          build-args: |
            IMAGE=${{ matrix.image }}
            FPM_VERSION=${{ matrix.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Try to push this to the local node's docker images?
          load: true

      - name: Grab package file
        id: package
        run: |
          # Extract content from the docker image built in the previous step
          docker run ${{ env.TARGET_TAG }} sh -c 'cd target; tar -zc *' | tar -zvx | tee files

          echo "files<<FILES" >> $GITHUB_OUTPUT
          cat files >> $GITHUB_OUTPUT
          echo "FILES" >> $GITHUB_OUTPUT
          echo "package=$(egrep '\.(deb|rpm)$' files)" >> $GITHUB_OUTPUT
          # Can't use colons in GHA artifact names, so replace : with -
          name="${{ matrix.image }}"
          echo "artifact-name=${name/:/-}" >> $GITHUB_OUTPUT
          
      - name: "Verify package works"
        run: |
          docker run \
            --volume=./fpm/verify.sh:/work/verify.sh:z \
            --volume="./${{ steps.package.outputs.package }}:/work/${{ steps.package.outputs.package }}:z" \
            --workdir=/work \
            ${{ matrix.image }} sh verify.sh "${{ steps.package.outputs.package }}"

      - name: Upload Artifact
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.package.outputs.artifact-name }}
          path: |
            ${{ steps.package.outputs.files }}

  check-artifacts:
    name: ðŸ“¦ Checking Artifacts
    runs-on: ubuntu-latest
    needs: [ package ]

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: List
        run: |
          echo "# Artifacts" >> $GITHUB_STEP_SUMMARY
          find artifacts  | sed -e 's/^/* /' >> $GITHUB_STEP_SUMMARY

          for i in artifacts/*/package.json ; do
            echo $i
            jq < $i
            echo
          done

  publish:
    needs: [ package, "check-artifacts" ]
    uses: ./.github/workflows/publish-package.yml
    permissions:
      contents: write
    secrets:
      GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
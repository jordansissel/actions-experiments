name: Package Ruby

on:
  workflow_dispatch:
    inputs:
      ruby_version:
        description: "The version of ruby to build"
        default: "3.4.5"
        type: string
      ruby_build_version:
        description: "The version of ruby-build to use"
        default: "20250724"
        type: string
  workflow_call:
    inputs:
      ruby_version:
        required: true
        type: string
      ruby_build_version:
        default: "20250724"
        type: string

jobs:
  settings:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        # Validate this mess with this:
        # sgrep set-matrix .github/workflows/ruby-build.yml | sed -e '1,/run:/d; s/>>.*//' | sh | sed -e '1d;$d' | jq
        run: |
          # Define the strategy matrix here so all the jobs can share it.
          printf "matrix<<JSON\n%s\nJSON\n" '{
            "os": [ "ubuntu-latest" ],
            "include": [ 
              { "ruby_version": "3.4.5" }
            ]
          }' >> $GITHUB_OUTPUT

  ruby-build:
    needs: [ settings ]
    strategy:
      matrix: ${{ fromJSON(needs.settings.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    outputs:
      tarball: ${{ steps.upload.outputs.artifact-id }}

    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Cache ruby-build
        id: cache-ruby-build
        uses: actions/cache@v4
        with:
          path: /opt/ruby-build
          key: ${{ runner.os }}-ruby-build-${{ inputs.ruby_build_version }}

      - name: Install ruby-build ${{ inputs.ruby_build_version }}
        if: steps.cache-ruby-build.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -Lo ruby-build-v${{ inputs.ruby_build_version }}.tar.gz https://github.com/rbenv/ruby-build/archive/refs/tags/v${{ inputs.ruby_build_version }}.tar.gz
          tar -zxf ruby-build-v${{ inputs.ruby_build_version }}.tar.gz
          sudo env PREFIX=/opt/ruby-build sh -x ./ruby-build-${{ inputs.ruby_build_version }}/install.sh
          rm ruby-build-v${{ inputs.ruby_build_version }}.tar.gz
          rm -r ruby-build-${{ inputs.ruby_build_version }}/

      - name: Cache ruby install
        id: cache-ruby-install
        uses: actions/cache@v4
        with:
          path: /opt/ruby/${{ matrix.ruby_version }}
          key: ${{ runner.os }}-ruby-install-${{ matrix.ruby_version }}

      - name: Install ruby-build dependencies
        if: steps.cache-ruby-install.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install -y build-essential autoconf libssl-dev libyaml-dev zlib1g-dev libffi-dev libgmp-dev rustc
        
      - name: Install ruby ${{ matrix.ruby_version }}
        if: steps.cache-ruby-install.outputs.cache-hit != 'true'
        run: |
          sudo env PATH="/opt/ruby-build/bin:$PATH" ruby-build ${{ matrix.ruby_version }} /opt/ruby/${{ matrix.ruby_version }}

      - name: Test ruby ${{ matrix.ruby_version }}
        run: |
          /opt/ruby/${{ matrix.ruby_version }}/bin/ruby --version

      # Github Actions Artifacts don't maintain permissions, so we need to pack
      # it up into a format that does maintain it.
      # Citation: https://github.com/actions/upload-artifact?tab=readme-ov-file#permission-loss
      # > File permissions are not maintained during artifact upload
      # > If you must preserve permissions, you can tar all of your files together before artifact upload
      - name: Create archive of ruby ${{ matrix.ruby_version }}
        run: |
          tar -cf ruby-${{ matrix.ruby_version }}.tar /opt/ruby/${{ matrix.ruby_version }}

      - name: Upload Artifact
        id: artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-ruby-${{ matrix.ruby_version }}
          path: ruby-${{ matrix.ruby_version }}.tar

  ruby-try:
    needs: [ settings, ruby-build ]
    strategy:
      matrix: ${{ fromJSON(needs.settings.outputs.matrix) }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Download Artifact
        id: download
        uses: actions/download-artifact@v4
        with:
          artifact-ids: ${{ needs.ruby-build.outputs[format('{0}', matrix.index)].tarball }}
          path: ruby-${{ matrix.ruby_version }}.tar

      - name: Extract
        run: |
          find .

          echo "# Unpacking ruby ${{ matrix.ruby_version }}"
          file="${{ steps.download.outputs.download-path }}/ruby-${{ matrix.ruby_version }}.tar"
          sudo tar -C / -xvf "$file"
          rm "$file"
          rmdir "${{ steps.download.outputs.download-path }}"

      - name: Try Ruby
        run: |
          /opt/ruby/${{ matrix.ruby_version }}/bin/ruby --version
          /opt/ruby/${{ matrix.ruby_version }}/bin/ruby -e 'puts "Hello world"'

  ruby-package:
    runs-on: ubuntu-latest
    needs: [ settings, ruby-try ]

    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4

      - name: Explore
        run: |
          ls -lR

      - name: Package Ruby
        id: package
        run: |
          export PATH="/opt/ruby/${{ matrix.ruby_version }}/bin:${PATH}"

          # Install fpm to a non-default location and then use it to package ruby.
          export GEM_HOME=./gems
          gem install --no-document fpm

          outdir="$(mktemp -d -p "${RUNNER_TEMP}"")"

          # Ruby requires libyaml, zlib, libcrypt, and libgmp
          ${GEM_HOME}/bin/fpm -s tar -t deb \
            -p "${outdir}" \
            -n fpm-ruby -v "${{ matrix.ruby_version }}" \
            --depends libyaml-0-2 \
            --depends zlib1g \
            --depends libcrypt1 \
            --depends libgmp10 \
            ruby-${{ matrix.ruby_version }}.tar

          echo "outdir=${outdir}" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-ruby-${{ matrix.ruby_version }}
          path: ${{ steps.package.outputs.outdir }}